//Cg
//Cg profile arbvp1 arbfp1
// clcheung: from ogre

void vshader(float4 vtx_position : POSITION, 
             float2 vtx_texcoord0 : TEXCOORD0,
             out float4 l_position : POSITION,
      	     out float2 l_texcoord0 : TEXCOORD0,
			 uniform float4 texpad_src,
             uniform float4x4 mat_modelproj)
{
  l_position=mul(mat_modelproj, vtx_position);
  //l_texcoord0=vtx_texcoord0;
  l_texcoord0 = vtx_position.xz * texpad_src.xy + texpad_src.xy;
}


//------------------------------------------------------
//Radial_Blur_FP.cg
//  Implements radial blur to be used with the compositor
//  It's very dependant on screen resolution
//------------------------------------------------------

static const float samples[10] =
{
-0.08,
-0.05,
-0.03,
-0.02,
-0.01,
0.01,
0.02,
0.03,
0.05,
0.08
};

void fshader(float2 l_texcoord0 : TEXCOORD0,
             out float4 o_color : COLOR,
			 uniform float4 k_param1, 
             uniform sampler2D k_src : TEXUNIT0)
{
   float sampleDist = k_param1.x;//1;
   float sampleStrength = k_param1.y;//2.2;
   //Vector from pixel to the center of the screen
   float2 dir = 0.5 - l_texcoord0;

   //Distance from pixel to the center (distant pixels have stronger effect)
   //float dist = distance( float2( 0.5, 0.5 ), l_texcoord0 );
   float dist = sqrt( dir.x*dir.x + dir.y*dir.y );


   //Now that we have dist, we can normlize vector
   dir = normalize( dir );

   //Save the color to be used later
   float4 color = tex2D( k_src, l_texcoord0 );

   //Average the pixels going along the vector
   float4 sum = color;
   for (int i = 0; i < 10; i++)
   {
      sum += tex2D( k_src, l_texcoord0 + dir * samples[i] * sampleDist );
   }
   sum /= 11;

   //Calculate amount of blur based on
   //distance and a strength parameter
   float t = dist * sampleStrength;
   t = saturate( t );//We need 0 <= t <= 1

   //Blend the original color with the averaged pixels
   o_color = lerp( color, sum, t );
   o_color.w = 1;
}
