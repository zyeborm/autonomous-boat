//Cg

//******************************************************************************
// ?ATI Technologies, 2003
// ************************
// This Effect renders object in Hatch ( pencil drawing ) style.
// It uses six different textures, each with lines with different density. 
// Lighting ( diffuse ) factor is used to determine the weight of  each texture
//******************************************************************************


void vshader(
             float4 vtx_position : POSITION,
             float2 vtx_texcoord0 : TEXCOORD0,
             float3 vtx_normal : NORMAL,
             uniform float4x4 mat_modelproj,
			 uniform in float4x4 trans_model_to_world,
             uniform float4 mspos_cam,
             uniform float4 mspos_light,
			 uniform float4 k_ambient,
			 
             out float4  l_hatchWeight0,
             out float4  l_hatchWeight1,
             out float2 l_texcoord0 : TEXCOORD0,
             out float4 l_position : POSITION
             )
{
	l_position = mul(mat_modelproj, vtx_position);
	l_texcoord0=vtx_texcoord0;

	// determine a simple diffuse lighting component based on a directional light in view space
	float3 NormalW = normalize(mul((float3x3)trans_model_to_world, vtx_normal));
	float3 lightW = normalize(mul(trans_model_to_world,mspos_light).xyz); 
	float diffuse = saturate(dot(lightW, NormalW)) + k_ambient.x;
	diffuse = pow(diffuse,4);
	float hatchFactor = diffuse * 6.0;
	l_hatchWeight0 = 0;
	l_hatchWeight1 = 0;
	if (hatchFactor > 5.9) {
		l_hatchWeight0.w = 1.0;
	} else if (hatchFactor > 5.0) {
		l_hatchWeight0.x = 1.0;
	} else if (hatchFactor > 4.0) { 
		l_hatchWeight0.y = (5.0 - hatchFactor);
		l_hatchWeight0.x = 1 - l_hatchWeight0.y;
	} else if (hatchFactor > 3.0) { 
		l_hatchWeight0.z = (4.0 - hatchFactor);
		l_hatchWeight0.y = 1 - l_hatchWeight0.z;
	} else if (hatchFactor > 2.0) { 
		l_hatchWeight1.x = (3.0 - hatchFactor);
		l_hatchWeight0.z = 1 - l_hatchWeight1.x;
	} else if (hatchFactor > 1.0) { 
		l_hatchWeight1.y = (2.0 - hatchFactor);
		l_hatchWeight1.x = 1 - l_hatchWeight1.y;
	} else if (hatchFactor > 0.0) { 
		l_hatchWeight1.z = (1.0 - hatchFactor);
		l_hatchWeight1.y = 1 - l_hatchWeight1.z;
	}
}

void fshader(
	//in uniform float4 k_param1,
    in float4  l_hatchWeight0,
	in float4  l_hatchWeight1,
	in float2 l_texcoord0 : TEXCOORD0,
	uniform sampler2D tex_0 : TEXUNIT0,
	uniform sampler2D k_hatch0 : TEXUNIT1,
	uniform sampler2D k_hatch1 : TEXUNIT2,
	uniform sampler2D k_hatch2 : TEXUNIT3,
	uniform sampler2D k_hatch3 : TEXUNIT4,
	uniform sampler2D k_hatch4 : TEXUNIT5,
	uniform sampler2D k_hatch5 : TEXUNIT6,
    //in float4 l_color        : COLOR0,
    out float4 o_color: COLOR0
    )
{
	float4 clr = tex2D(tex_0,l_texcoord0);
	float c = sqrt(dot(clr, clr));
	l_hatchWeight0 *= c;
	l_hatchWeight1 *= c;
	float4 hatchTex0 = tex2D(k_hatch0,l_texcoord0) * l_hatchWeight0.x;
	float4 hatchTex1 = tex2D(k_hatch1,l_texcoord0) * l_hatchWeight0.y;
	float4 hatchTex2 = tex2D(k_hatch2,l_texcoord0) * l_hatchWeight0.z;
	float4 hatchTex3 = tex2D(k_hatch3,l_texcoord0) * l_hatchWeight1.x;
	float4 hatchTex4 = tex2D(k_hatch4,l_texcoord0) * l_hatchWeight1.y;
	float4 hatchTex5 = tex2D(k_hatch5,l_texcoord0) * l_hatchWeight1.z;
	//o_color = hatchTex0 + hatchTex1 + hatchTex2 + hatchTex3 + hatchTex4 + hatchTex5;
	o_color = (l_hatchWeight0.w + hatchTex0 + hatchTex1 + hatchTex2 + hatchTex3 + hatchTex4 + hatchTex5);
	o_color.w = 1;
}
