//Cg

// clcheung: Mar 2009, dynamic mirror 
struct Wave {
  float freq;  // 2*PI / wavelength
  float amp;   // amplitude
  float phase; // speed * 2*PI / wavelength
  float2 dir;
};


void vshader(
    uniform float4x4 mat_modelproj,
	uniform in float4x4 trans_model_to_world,
    in float4 vtx_position : POSITION,
    //in float3 vtx_normal : NORMAL,
    in float4 vtx_color : COLOR,
	in uniform float4 k_time,
	in uniform float4 k_waveInfo,
	in uniform float4 k_eyePositionW,

    out float4 l_color : COLOR,
    out float4 l_position : POSITION,
	out float3 l_R : TEXCOORD1)
{
	float4 position = vtx_position;
	#define NWAVES 1
	Wave wave[NWAVES] = {
		{ 1.0, 1.0, 5, float2(0.1, 0.1) },
		//{ 2.0, 0.5, 1.7, float2(0.1, 0.1) }
	};
    wave[0].freq = k_waveInfo.x; //waveFreq;
    wave[0].amp = k_waveInfo.y; //waveAmp;

    wave[1].freq = k_waveInfo.x * 2; // waveFreq * 3.0;
    wave[1].amp = k_waveInfo.y * 0.33; //waveAmp * 0.33;


	// sum waves
	float ddx = 0.0, ddy = 0.0;
	float deriv;
	float angle;
	float2 d;
	// wave synthesis 
	for(int i = 0; i<NWAVES; ++i)
	{
		d =  position.xy - wave[i].dir;
		d = normalize(d);
		angle = dot(d, position.xy) * wave[i].freq + k_time.x * wave[i].phase;
		position.z += wave[i].amp * sin( angle );
		// calculate derivate of wave function
		deriv = wave[i].freq * wave[i].amp * cos(angle);
		ddx -= deriv * wave[i].dir.x;
		ddy -= deriv * wave[i].dir.y;
	}
	float3 normal =  normalize(float3(ddx, ddy, 1)); 
	float3 positionW = mul(trans_model_to_world,position).xyz; 
	float3 N = mul((float3x3)trans_model_to_world, normal);
	N=normalize(N); 
	float3 I = positionW - k_eyePositionW;
	l_R = reflect(I, N);
    l_color = vtx_color;
    l_position = mul(mat_modelproj, position);
}

void fshader(
	in uniform float4 k_param1,
    in float3 l_R : TEXCOORD1,
	in uniform samplerCUBE k_texcube : TEXUNIT0,
    in float4 l_color        : COLOR0,
    out float4 o_color: COLOR0
    )
{
	float4 r;
	r.xyz = l_R;
	r.w = k_param1.y; // reflection blur
    //float4 reflectedColor = texCUBE(k_texcube, l_R);
	float4 reflectedColor = texCUBEbias(k_texcube, r);
	o_color = lerp(l_color, reflectedColor, k_param1.x); //k_reflectivity
}                             
