//Cg
//Cg profile vp30 fp30

/*
Comments:
	CL Cheung, Mar 2009
	A vertex texture shader, based on Vertex Texture Fetch Water demo in NVIDIA SDK 9.5
	This shader handles reflection and refraction
*/


void vshader( 	in float4 vtx_position : POSITION,
				in float2 vtx_texcoord0 : TEXCOORD0,
                in uniform float4x4 mat_modelproj,
				in uniform float4x4 trans_model_to_world,
				in uniform sampler2D tex_0 : TEXUNIT0,	// simulationSampler
				in uniform float4 k_eyePositionW,
				in uniform float4 k_gridratio,
				in uniform float4 k_lightpos,
				out float4 l_eyeVector: TEXCOORD1,
				out float4 l_normal: TEXCOORD2,
				out float4 l_lightVectorWS: TEXCOORD3,
				out float4 l_halfVectorWS: TEXCOORD4,
                out float4 l_position : POSITION)
{
	float4 position = vtx_position;
	float4 simulationSample = tex2D(tex_0, vtx_texcoord0);
	float4 normal;
	position.z = (simulationSample.x-0.5) * k_gridratio.w;
	float3 dzdx = float3(k_gridratio.x, 0.0,  (simulationSample.y-0.5) * 4 * k_gridratio.z);
	float3 dzdy = float3(0.0, k_gridratio.y, (simulationSample.z-0.5) * 4 * k_gridratio.z);
	normal.xyz = normalize(cross(dzdx, dzdy));
	
	l_normal = mul(trans_model_to_world,normal);
	
   	l_position = mul(mat_modelproj, position);
	float3 positionW = mul(trans_model_to_world,position).xyz; 
	l_eyeVector.xyz = normalize(k_eyePositionW.xyz - positionW);

	// Output the light vector in world space
    l_lightVectorWS.xyz = normalize(k_lightpos.xyz - positionW);

    // Output the half vector in world space
    // No need to normalize because it's normalized in the pixel shader
    l_halfVectorWS.xyz = l_eyeVector.xyz + l_lightVectorWS.xyz;

}


void fshader( 	
		in uniform samplerCUBE k_texcube : TEXUNIT1,
		in float4 l_eyeVector: TEXCOORD1,
		in float4 l_normal: TEXCOORD2,
		in float4 l_lightVectorWS: TEXCOORD3,
		in float4 l_halfVectorWS: TEXCOORD4,
		in uniform float4 k_param2,
		in uniform float4 k_watercolor,
		out float4 o_color : COLOR)
{
    float4 specular;
	float specularIntensity = k_param2.y;
    // Normalize direction vectors
    l_lightVectorWS.xyz = normalize(l_lightVectorWS.xyz);
    l_normal.xyz = normalize(l_normal.xyz);
    l_halfVectorWS.xyz = normalize(l_halfVectorWS.xyz);
	//l_normal.xyz = float3(0,0,1);

    // Compute the specular term
    specular.x = pow(max(dot(l_halfVectorWS.xyz, l_normal.xyz), 0), 3);
	//specular.x = 1;

	
    // Put a cliff in the specular function
	
    if(specular.x < 0.5) {
      specular.x = 2.0 * specular.x * specular.x;
    }
    specular.xyz = specular.xxx * half3(specularIntensity, specularIntensity, specularIntensity);
    specular.w = 0;
	

	float4 R;
	R.xyz = reflect(-l_eyeVector.xyz,l_normal.xyz);
	R.w = 0;
	//float4 reflectedColor = texCUBEbias(k_texcube, R);
	float4 reflectedColor = texCUBE(k_texcube, R.xyz);
	//o_color = reflectedColor;
	//o_color = lerp(k_watercolor, reflectedColor, k_param2.x); //k_reflectivity
	//o_color = lerp(k_watercolor, reflectedColor, k_param2.x) + specular;

	float4 refraction = k_watercolor;
	refraction.w = 0.0;
	o_color = lerp(refraction, reflectedColor, k_param2.x) + specular; //k_reflectivity

	//o_color = specular;
	//o_color.w = 1;
}
