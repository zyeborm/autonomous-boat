//Cg
void vshader(
	 in float4 vtx_color : COLOR,
	 out float4 l_color : COLOR,
	 uniform float4x4 trans_model_to_view,
	 uniform float4x4 tpose_view_to_model,
	 in float4 vtx_normal : TEXCOORD0,
	 out float4 l_normal : TEXCOORD1,
	 out float4 l_pos : TEXCOORD0,
	 float4 vtx_position : POSITION,
	 out float4 l_position : POSITION,
	 uniform float4x4 mat_modelproj,
     in float2 vtx_texcoord0 : TEXCOORD0, 
	 out float2 l_my : TEXCOORD2,
	 in uniform float4 k_fogDensity,
	 out float l_fogExponent : TEXCOORD3
) {
	 float fogDistance;
	 l_position = mul(mat_modelproj, vtx_position);
     fogDistance = length(l_position);
	 l_fogExponent = fogDistance * k_fogDensity;
	 l_color = vtx_color;
	 l_pos = mul(trans_model_to_view, vtx_position);
	 l_normal.xyz = mul((float3x3)tpose_view_to_model, vtx_normal.xyz);
	 l_normal.w = 0;
	 l_my = vtx_texcoord0;
}

void fshader(
	 in float3 l_normal : TEXCOORD1,
	 in float4 l_pos : TEXCOORD0,
	 uniform float4 alight_alight0,
	 out float4 o_color : COLOR0,
	 in float4 l_color : COLOR,
     uniform sampler2D tex_0 : TEXUNIT0,
	 in float2 l_my : TEXCOORD2,
	 in float l_fogExponent : TEXCOORD3,
	 in uniform float4 k_fogColor : COLOR

) {
	 float4 result;
	 float fogFactor;
	 // Fetch all textures.
	 // Correct the surface normal for interpolation effects
	 l_normal = normalize(l_normal);
	 // Begin view-space light calculations
	 float ldist,lattenv,langle;
	 float4 lcolor,lspec,lvec,lpoint,latten,ldir,leye,lhalf;
	 float4 tot_ambient = float4(0,0,0,0);
	 // Ambient Light 0
	 lcolor = alight_alight0;
	 tot_ambient += lcolor;
	 // Begin view-space light summation
	 result = float4(0,0,0,0);
	 result += tot_ambient * l_color;
	 result = saturate(result);
	 // End view-space light calculations
	 //o_color = result * 1.000001;
	 fogFactor = exp2(-abs(l_fogExponent));
	 //o_color = result * tex2D(tex_0, l_my);
	 //o_color = lerp(k_fogColor, result * tex2D(tex_0, l_my), fogFactor);
	 // always make a red fog
	 o_color = lerp(k_fogColor, float4(1,0,0,1) * tex2D(tex_0, l_my), fogFactor);
}
